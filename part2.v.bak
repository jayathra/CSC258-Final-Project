`define VGA_WIDTH 160
`define VGA_HEIGHT 120
`define IMG_WIDTH 16
`define IMG_HEIGHT 16

// Part 2 skeleton

module part2
	(
		CLOCK_50,						//	On Board 50 MHz
		// Your inputs and outputs here
        KEY,
        SW,
		// The ports below are for the VGA output.  Do not change.
		VGA_CLK,   						//	VGA Clock
		VGA_HS,							//	VGA H_SYNC
		VGA_VS,							//	VGA V_SYNC
		VGA_BLANK_N,						//	VGA BLANK
		VGA_SYNC_N,						//	VGA SYNC
		VGA_R,   						//	VGA Red[9:0]
		VGA_G,							//	VGA Green[9:0]
		VGA_B   						//	VGA Blue[9:0]
	);

	input			CLOCK_50;				//	50 MHz
	input   [9:0]   SW;
	input   [3:0]   KEY;

	// Declare your inputs and outputs here
	// Do not change the following outputs
	output			VGA_CLK;   				//	VGA Clock
	output			VGA_HS;					//	VGA H_SYNC
	output			VGA_VS;					//	VGA V_SYNC
	output			VGA_BLANK_N;				//	VGA BLANK
	output			VGA_SYNC_N;				//	VGA SYNC
	output	[9:0]	VGA_R;   				//	VGA Red[9:0]
	output	[9:0]	VGA_G;					//	VGA Green[9:0]
	output	[9:0]	VGA_B;   				//	VGA Blue[9:0]

	wire resetn;
	assign resetn = KEY[0];

	// Create the colour x, y and writeEn wires that are inputs to the controller.
	wire colour;
	wire [7:0] x;
	wire [6:0] y;
	wire writeEn;
	// Load and count wires.
	wire x_en_wire, y_en_wire;
	wire [3:0] count;
	wire w_move;
	wire w_slow_clock;

	// Create an Instance of a VGA controller - there can be only one!
	// Define the number of colours as well as the initial background
	// image file (.MIF) for the controller.
	vga_adapter VGA(
			.resetn(resetn),
			.clock(CLOCK_50),
			.colour(colour),
			.x(x),
			.y(y),
			.plot(writeEn),
			/* Signals for the DAC to drive the monitor. */
			.VGA_R(VGA_R),
			.VGA_G(VGA_G),
			.VGA_B(VGA_B),
			.VGA_HS(VGA_HS),
			.VGA_VS(VGA_VS),
			.VGA_BLANK(VGA_BLANK_N),
			.VGA_SYNC(VGA_SYNC_N),
			.VGA_CLK(VGA_CLK));
		defparam VGA.RESOLUTION = "160x120";
		defparam VGA.MONOCHROME = "FALSE";
		defparam VGA.BITS_PER_COLOUR_CHANNEL = 1;
		defparam VGA.BACKGROUND_IMAGE = "black.mif";

	// datapath
	datapath d0(
		.clk(CLOCK_50),
		.resetn(resetn),
		.x_in(7'b0),
		.y_in(6'b0),
		.x_en(x_en_wire),
		.y_en(y_en_wire),
		.plot(WriteEn),
		.move(w_move),

		.x(x),
		.y(y),
		.count(count),
		.EN(w_slow_clock)
	);

	// control
	control c0(
		.clk(CLOCK_50),
		.resetn(resetn),
		.go(~KEY[1]),
		.count(count),
		.EN(w_slow_clock),

		.x_en(x_en_wire),
		.y_en(y_en_wire),
		.plotout(writeEn),
		.colour_out(colour),
		.move(w_move)
	);

endmodule

	// Put your code here. Your code should produce signals x,y,colour and writeEn/plot
	// for the VGA controller, in addition to any other functionality your design may require.

    // Instansiate datapath
	// datapath d0(...);

module datapath (
	input clk,
	input resetn,
	input [7:0] x_in,
	input [6:0] y_in,
	input x_en, y_en, // Enable outputs from the FSM that signal the coordinates to move.
	input plot,
	input move,

	// Register for x coordinate.
	output reg [7:0] x,

	// Registers for y coordinate.
	output reg [7:0] y,

	// Register for Counter.
	output reg [3:0] count,

	// 50Hz clock.
	output reg EN = 0
	);

	// Registers for x and y coordinates.
	reg [7:0] xreg;
	reg [6:0] yreg;

	// Coordinates during animation.
	reg[7:0] x_anm = 0;
    	reg[6:0] y_anm = 0;

	//Indicates direction of animation.
	reg x_fwd = 1, y_fwd = 1;

	// Slowed down clock 50Hz
    	reg [19:0] cnt = 0;

	// Registers x and y with respective input logic.
	always @ (posedge clk) begin
		if (!resetn)
		begin
			xreg <= x_in;
			yreg <= y_in;
		end
		else begin
			if (x_en)
				xreg <= xreg + x_anm;
			else
				xreg <= xreg;
			if (y_en)
				yreg <= yreg + y_anm;
			else
				yreg <= yreg;

		end
	end

	// Counter to draw 4 x 4 box.
	always @ (posedge clk) begin
		if (!resetn)
			count <= 4'b0;
		else if (count == 4'b1111)
			count <= 4'b0;
		else if (plot)
			count <= count + 4'b1;
	end

	// Adder to add count to the coordinates.
	always @ (posedge clk) begin
		if (plot) begin
			x <= xreg + count[1:0];
			y <= yreg + count[3:2];
		end
	end

	//Clock for this module should be 500Hz (EN)
	always @ (posedge clk) begin
		if (!resetn) begin
			x_anm = 0;
			y_anm = 0;
			x_fwd = 1;
			y_fwd = 1;
		end

		else if (EN && move) begin
			if (x_fwd)
				x_anm = x_anm + 1;
			else
				x_anm = x_anm - 1;
			if (y_fwd)
				y_anm = y_anm + 1;
			else
				y_anm = y_anm - 1;
			// Bounce off the right side of the screen.
			if (x_anm == (`VGA_WIDTH - `IMG_WIDTH))
				x_fwd = 0;
			// Bounce off the left side of the screen.
			else if (x_anm == 0)
				x_fwd = 1;
			// Bounce off the top of the screen.
			if (y_anm == (`VGA_HEIGHT - `IMG_HEIGHT))
				y_fwd = 0;
			// Bounce off the bottom of the screen.
			else if (y_anm == 0)
				y_fwd = 1;
		end
	end //end always

    always @ (posedge clk) begin
        cnt = cnt + 1;
        //83333 clock cycles is 60 Hz
        if (cnt == 20'd1000000) begin
            cnt = 1'b0;
            EN = ~EN;
        end
    end

endmodule

    // Instansiate FSM control
    // control c0(...);

module control (
	input clk,
	input resetn,
	input go,
	input [3:0] count,
	input EN,

	output reg x_en,
	output reg y_en,
	output reg plotout,
	output reg colour_out,
	output reg move
	);

	reg [3:0] current_state, next_state;

	localparam		S_LOAD_WAIT		= 3'd0,
					S_LOAD			= 3'd1,
					S_PLOT_WAIT		= 3'd2,
					S_PLOT			= 3'd3,
					S_ERASE			= 3'd4,
					S_MOVE			= 3'd5;

	// State table (next state logic).
	always @ (*)
	begin: state_table
		case (current_state)
			S_LOAD_WAIT: next_state = go ? S_LOAD : S_LOAD_WAIT; // Loop in current state until coordinates
			S_LOAD: next_state = S_PLOT_WAIT;																			// are loaded
			S_PLOT_WAIT: next_state = S_PLOT; // Loop in current state until plot goes high.
			S_PLOT: begin
				if (count == 4'b1111)
					next_state = S_ERASE;	// Start over after plotting.
				else
					next_state = S_PLOT;
			end
			S_ERASE:  begin
				if (count == 4'b1111)
					next_state = S_MOVE;	// Start over after plotting.
				else
					next_state = S_ERASE;
			end
			S_MOVE: next_state = EN? S_LOAD : S_MOVE;
			default: next_state = S_LOAD_WAIT;
		endcase
	end // state_table

	// Output logic (datapath control signals).
	always @ (*)
	begin: enable_signals
		// By default make the load and plot signals 0.
		x_en = 1'b0;
		y_en = 1'b0;
		plotout = 1'b0;
		move = 1'b0;
		colour_out = 3'b111;

		case (current_state)
			S_LOAD: begin
				x_en = 1'b1;
				y_en = 1'b1;
			end
			S_PLOT:	plotout = 1'b1;

			S_ERASE: begin
				colour_out = 3'b000;
				plotout = 1'b1;
			end
			S_MOVE: move = 1'b1;
			// default: dont't need default case since we made sure all of the outputs were assigned a value at the
			// start of the always block.
		endcase
	end // enable_signals

	// current_state registers
	always @ (posedge clk)
	begin: state_FFs
		if (!resetn)
			current_state <= S_LOAD_WAIT;
		else
			current_state <= next_state;
	end // state_FFs

endmodule
